//run me first: starting here (highlight and shift+enter)
o = Server.local.options;
o.numAudioBusChannels = 256;
o.numControlBusChannels = 8184;
o.numBuffers = 2048;
o.maxNodes = 2048;
o.maxSynthDefs = 2048;
o.blockSize = 128;
//down to here

//then start server

//then run me: starting here
(
a = OSCFunc( { | msg, time, addr, port |
	var start = msg[1].asFloat;
	var stop = msg[2].asFloat;	
	var duration = msg[3].asFloat;	
	var freq = msg[4].asFloat;
	{
		var env = Env.new([start,stop], [duration],'linear', 2);
		var gen = EnvGen.kr(env);
		SinOsc.ar(freq) * gen * 1
	}.play
}, '/envelopedSinOsc' );

b = OSCFunc( { | msg, time, addr, port |
	var freq1 = msg[1].asFloat;
	var freq2 = msg[2].asFloat;
	{
		var sin1 = SinOsc.ar(freq1);
		var sin2 = SinOsc.ar(freq2);
		Mix([sin1, sin2])
	}.play
}, '/mixedSinOsc' );

c = OSCFunc( { | msg, time, addr, port |
	s.freeAll
}, '/stopAll' );

d = OSCFunc( { | msg, time, addr, port |
	
	var size = msg[1].asInt;
	var sins = Array.new(size);
	var numberOfArgumentsPerEnvelope = 6;	
			
	{ 
		var mix = 
		Mix.fill(size, { 
			arg index;
			var attack = msg[2 + (index * numberOfArgumentsPerEnvelope)].asFloat;			
			var release = msg[3 + (index * numberOfArgumentsPerEnvelope)].asFloat;
			var level = msg[4 + (index * numberOfArgumentsPerEnvelope)].asFloat;
			var curve = msg[5 + (index * numberOfArgumentsPerEnvelope)].asFloat;
			var freq = msg[6 + (index * numberOfArgumentsPerEnvelope)].asFloat;
			var proportion = msg[7 + (index * numberOfArgumentsPerEnvelope)].asFloat;
			var env = Env.new([0, level, 0], [attack, release], curve);
			var gen = EnvGen.kr(env);
			SinOsc.ar(freq) * gen * 0.5 * proportion			
		}) * (1/size);
		DetectSilence.ar(mix, doneAction:2);
		mix
	}.play;	
}, '/mixedPercEnvelopes' );
)
//down to here